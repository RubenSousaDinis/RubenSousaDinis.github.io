"use strict";function setOfCachedUrls(e){return e.keys().then(function(e){return e.map(function(e){return e.url})}).then(function(e){return new Set(e)})}var precacheConfig=[["/rubensousadinis.github.io/index.html","0df886eb99fb2dac49bf065cbeb11a4e"],["/rubensousadinis.github.io/static/css/main.7fd4c707.css","58a9996dea536b21d4b9c5a5648397d7"],["/rubensousadinis.github.io/static/js/main.9852b480.js","3548e7edc2cf155b90bc443149017d32"],["/rubensousadinis.github.io/static/media/flags.9c74e172.png","9c74e172f87984c48ddf5c8108cabe67"],["/rubensousadinis.github.io/static/media/foto_perfil.c95a591f.jpg","c95a591fc35bdf3a02557bfd740feaed"],["/rubensousadinis.github.io/static/media/icons.674f50d2.eot","674f50d287a8c48dc19ba404d20fe713"],["/rubensousadinis.github.io/static/media/icons.912ec66d.svg","912ec66d7572ff821749319396470bde"],["/rubensousadinis.github.io/static/media/icons.af7ae505.woff2","af7ae505a9eed503f8b8e6982036873e"],["/rubensousadinis.github.io/static/media/icons.b06871f2.ttf","b06871f281fee6b241d60582ae9369b9"],["/rubensousadinis.github.io/static/media/icons.fee66e71.woff","fee66e712a8a08eef5805a46892932ad"],["/rubensousadinis.github.io/static/media/not_found.2d3648cc.jpeg","2d3648cc1e42b985aede87f1f53dafbe"],["/rubensousadinis.github.io/static/media/runtime_logo.c75bf0e8.png","c75bf0e89a07d6f9c24f359401ed93b3"],["/rubensousadinis.github.io/static/media/section_1.2c58897a.jpeg","2c58897a74b7316c9443acc494376ff5"],["/rubensousadinis.github.io/static/media/section_2.863cb677.jpg","863cb677b9a454bf25bf33a5e914c203"],["/rubensousadinis.github.io/static/media/section_4.068ec40d.jpeg","068ec40d6b6be89929078180ec23722d"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(e,t){var n=new URL(e);return"/"===n.pathname.slice(-1)&&(n.pathname+=t),n.toString()},cleanResponse=function(e){if(!e.redirected)return Promise.resolve(e);return("body"in e?Promise.resolve(e.body):e.blob()).then(function(t){return new Response(t,{headers:e.headers,status:e.status,statusText:e.statusText})})},createCacheKey=function(e,t,n,i){var a=new URL(e);return i&&a.pathname.match(i)||(a.search+=(a.search?"&":"")+encodeURIComponent(t)+"="+encodeURIComponent(n)),a.toString()},isPathWhitelisted=function(e,t){if(0===e.length)return!0;var n=new URL(t).pathname;return e.some(function(e){return n.match(e)})},stripIgnoredUrlParameters=function(e,t){var n=new URL(e);return n.hash="",n.search=n.search.slice(1).split("&").map(function(e){return e.split("=")}).filter(function(e){return t.every(function(t){return!t.test(e[0])})}).map(function(e){return e.join("=")}).join("&"),n.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(e){var t=e[0],n=e[1],i=new URL(t,self.location),a=createCacheKey(i,hashParamName,n,/\.\w{8}\./);return[i.toString(),a]}));self.addEventListener("install",function(e){e.waitUntil(caches.open(cacheName).then(function(e){return setOfCachedUrls(e).then(function(t){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(n){if(!t.has(n)){var i=new Request(n,{credentials:"same-origin"});return fetch(i).then(function(t){if(!t.ok)throw new Error("Request for "+n+" returned a response with status "+t.status);return cleanResponse(t).then(function(t){return e.put(n,t)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(e){var t=new Set(urlsToCacheKeys.values());e.waitUntil(caches.open(cacheName).then(function(e){return e.keys().then(function(n){return Promise.all(n.map(function(n){if(!t.has(n.url))return e.delete(n)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(e){if("GET"===e.request.method){var t,n=stripIgnoredUrlParameters(e.request.url,ignoreUrlParametersMatching),i="index.html";(t=urlsToCacheKeys.has(n))||(n=addDirectoryIndex(n,i),t=urlsToCacheKeys.has(n));var a="/rubensousadinis.github.io/index.html";!t&&"navigate"===e.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],e.request.url)&&(n=new URL(a,self.location).toString(),t=urlsToCacheKeys.has(n)),t&&e.respondWith(caches.open(cacheName).then(function(e){return e.match(urlsToCacheKeys.get(n)).then(function(e){if(e)return e;throw Error("The cached response that was expected is missing.")})}).catch(function(t){return console.warn('Couldn\'t serve response for "%s" from cache: %O',e.request.url,t),fetch(e.request)}))}});